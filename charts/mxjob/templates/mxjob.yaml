{{- $gpuCount := .Values.gpuCount -}}
{{- $dataDirs := .Values.dataDirs -}}
{{- $cleanPodPolicy := .Values.cleanPodPolicy -}}
apiVersion: kubeflow.org/v1beta1
kind: MXJob
metadata:
  name: {{ .Release.Name }}
  labels:
    app: {{ template "mxjob.name" . }}
    chart: {{ template "mxjob.chart" . }}
    release: {{ .Release.Name }}
    createdBy: "MXJob"
spec:
{{- if .Values.cleanPodPolicy }}
{{- if eq "None" $cleanPodPolicy }}
  cleanPodPolicy: None
{{- end }}
{{- if eq "Running" $cleanPodPolicy }}
  cleanPodPolicy: Running
{{- end }}
{{- end }}
  jobMode: MXTrain
  mxReplicaSpecs:
    Scheduler:
      replicas: {{ .Values.schedulerReplicas }}
      restartPolicy: Never
      template:
        spec:
          {{- if ne (len .Values.nodeSelectors) 0 }}
          nodeSelector:
          {{- range $nodeKey,$nodeVal := .Values.nodeSelectors }}
          {{ $nodeKey }}: "{{ $nodeVal }}"
          {{- end }}
          {{- end }}
          tolerations:
          {{- range $tolerationKey := .Values.tolerations }}
            {{- if eq $tolerationKey "all" }}
            - operator: "Exists"
            {{- else }}
            - key: "{{ $tolerationKey }}"
              operator: "Exists"
            {{- end }}
          {{- end }}
          annotations:
          {{- range $key, $value := .Values.annotations }}
            {{ $key }}: {{ $value | quote }}
          {{- end }}
          {{- if ne (len .Values.imagePullSecrets) 0 }}
          imagePullSecrets:
          {{- range $imagePullSecret := .Values.imagePullSecrets }}
            - name: "{{ $imagePullSecret }}"
          {{- end }}
          {{- end }}
          containers:
            - name: mxnet
              image: "{{ .Values.image }}"
              imagePullPolicy: {{ .Values.imagePullPolicy }}
              command:
                - "sh"
                - "-c"
                - "{{ .Values.command }}"
              resources:
                requests:
                  {{- if .Values.schedulerCPU }}
                  cpu: {{ .Values.schedulerCPU | quote }}
                  {{- end }}
                  {{- if .Values.schedulerMemory }}
                  memory: {{ .Values.schedulerMemory | quote }}
                  {{- end }}
                limits:
                {{- if .Values.schedulerCPU }}
                  cpu: {{ .Values.schedulerCPU | quote }}
                  {{- end }}
                  {{- if .Values.schedulerMemory }}
                  memory: {{ .Values.schedulerMemory | quote }}
                  {{- end }}
    Server:
      replicas: {{ .Values.workers }}
      restartPolicy: Never
      template:
        spec:
          {{- if ne (len .Values.nodeSelectors) 0 }}
          nodeSelector:
          {{- range $nodeKey,$nodeVal := .Values.nodeSelectors }}
          {{ $nodeKey }}: "{{ $nodeVal }}"
          {{- end }}
          {{- end }}
          tolerations:
          {{- range $tolerationKey := .Values.tolerations }}
            {{- if eq $tolerationKey "all" }}
            - operator: "Exists"
            {{- else }}
            - key: "{{ $tolerationKey }}"
              operator: "Exists"
            {{- end }}
          {{- end }}
          annotations:
            {{- range $key, $value := .Values.annotations }}
              {{ $key }}: {{ $value | quote }}
            {{- end }}
          {{- if ne (len .Values.imagePullSecrets) 0 }}
          imagePullSecrets:
          {{- range $imagePullSecret := .Values.imagePullSecrets }}
            - name: "{{ $imagePullSecret }}"
            {{- end }}
          {{- end }}
          containers:
            - name: mxnet
              image: {{ .Values.image }}
              imagePullPolicy: {{ .Values.imagePullPolicy }}
              command:
                - "sh"
                - "-c"
                - "{{ .Values.command }}"
              resources:
                requests:
                  {{- if .Values.serverCPU }}
                  cpu: {{ .Values.serveCPU | quote }}
                  {{- end }}
                  {{- if .Values.serverMemory }}
                  memory: {{ .Values.serverMemory | quote }}
                  {{- end }}
                limits:
                  {{- if .Values.serverCPU }}
                  cpu: {{ .Values.serveCPU | quote }}
                  {{- end }}
                  {{- if .Values.serverMemory }}
                  memory: {{ .Values.serverMemory | quote }}
                  {{- end }}
    Worker:
      replicas: {{ .Values.workers }}
      restartPolicy: Never
      template:
        spec:
          {{- if ne (len .Values.nodeSelectors) 0 }}
          nodeSelector:
          {{- range $nodeKey,$nodeVal := .Values.nodeSelectors }}
            {{ $nodeKey }}: "{{ $nodeVal }}"
          {{- end }}
          {{- end }}
          tolerations:
          {{- range $tolerationKey := .Values.tolerations }}
            {{- if eq $tolerationKey "all" }}
            - operator: "Exists"
            {{- else }}
            - key: "{{ $tolerationKey }}"
              operator: "Exists"
            {{- end }}
          {{- end }}
          {{- if ne (len .Values.imagePullSecrets) 0 }}
          imagePullSecrets:
          {{- range $imagePullSecret := .Values.imagePullSecrets }}
            - name: "{{ $imagePullSecret }}"
          {{- end }}
          {{- end }}
          containers:
            - name: mxnet
              image: {{ .Values.image }}
              imagePullPolicy: {{ .Values.imagePullPolicy }}
              {{- if .Values.workingDir }}
              workingDir: {{ .Values.workingDir }}
              {{- end }}
              command:
                - "sh"
                - "-c"
                - "{{ .Values.command }}"
              env:
                {{- range $key, $value := .Values.envs }}
                - name: "{{ $key }}"
                  value: "{{ $value }}"
                {{- end }}
              resources:
                requests:
                  {{- if gt (int $gpuCount) 0}}
                  nvidia.com/gpu: {{ $gpuCount | quote }}
                  {{- end }}
                  {{- if .Values.WorkerCPU }}
                  cpu: {{ .Values.WorkerCPU | quote }}
                  {{- end }}
                  {{- if .Values.WorkerMemory }}
                  memory: {{ .Values.WorkerMemory | quote }}
                  {{- end }}
                limits:
                  {{- if gt (int $gpuCount) 0}}
                  nvidia.com/gpu: {{ $gpuCount | quote }}
                  {{- end }}
                  {{- if .Values.WorkerCPU }}
                  cpu: {{ .Values.cpu | quote }}
                  {{- end }}
                  {{- if .Values.WorkerMemory }}
                  memory: {{ .Values.WorkerMemory | quote }}
                  {{- end }}
              volumeMounts:
                - mountPath: /dev/shm
                  name: dshm
                {{- if $dataDirs }}
                {{- range $dataDirs }}
                - mountPath: {{ .containerPath }}
                  name: {{ .name }}
                {{- end }}
                {{- end }}
          volumes:
            - emptyDir:
                medium: Memory
                sizeLimit: {{ .Values.shmSize }}
              name: dshm
            {{- if $dataDirs }}
            {{- range $dataDirs }}
            - hostPath:
                path: {{ .hostPath }}
              name: {{ .name }}
            {{- end }}
            {{- end }}
  successPolicy: {{ .Values.successPolicy }}